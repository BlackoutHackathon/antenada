const express = require('express');
const bodyParser = require('body-parser');
const Datastore = require('nedb');

const app = express();
const port = 3001;

// Inicializando banco de dados para eventos da agenda
const agendaDb = new Datastore({ filename: 'agenda.db', autoload: true });

app.use(bodyParser.json());

// -------------------------------------------------
// CRUD APIs para Eventos da Agenda
// -------------------------------------------------
app.post('/events', (req, res) => {
  const event = req.body;
  agendaDb.insert(event, (err, newDoc) => {
    if (err) return res.status(500).send(err);
    res.status(201).json(newDoc);
  });
});

app.get('/events', (req, res) => {
  const { date, location } = req.query;
  const query = {};
  if (date) query.date = date;
  if (location) query.location = location;
  agendaDb.find(query, (err, docs) => {
    if (err) return res.status(500).send(err);
    res.json(docs);
  });
});

app.get('/events/:id', (req, res) => {
  const { id } = req.params;
  agendaDb.findOne({ _id: id }, (err, doc) => {
    if (err) return res.status(500).send(err);
    if (!doc) return res.status(404).send('Evento nÃ£o encontrado.');
    res.json(doc);
  });
});

app.put('/events/:id', (req, res) => {
  const { id } = req.params;
  const updatedData = req.body;
  agendaDb.update({ _id: id }, { $set: updatedData }, {}, (err, numReplaced) => {
    if (err) return res.status(500).send(err);
    res.json({ numReplaced });
  });
});

app.delete('/events/:id', (req, res) => {
  const { id } = req.params;
  agendaDb.remove({ _id: id }, {}, (err, numRemoved) => {
    if (err) return res.status(500).send(err);
    res.json({ numRemoved });
  });
});

app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
